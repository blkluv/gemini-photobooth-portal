
import { GoogleGenAI } from "@google/genai";
import { GEMINI_IMAGE_MODEL } from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  console.warn("API_KEY environment variable not set. Gemini API features will not work.");
}

const ai = API_KEY ? new GoogleGenAI({ apiKey: API_KEY }) : null;

export const geminiService = {
  generateImage: async (prompt: string): Promise<string | null> => {
    if (!ai) {
      throw new Error("Gemini API client not initialized. API_KEY might be missing.");
    }
    if (!prompt) {
      throw new Error("Prompt cannot be empty for image generation.");
    }

    try {
      const fullPrompt = `${prompt}, sticker style, high quality, with a transparent background, PNG format`;
      console.log(`Generating image with prompt: "${fullPrompt}" using model ${GEMINI_IMAGE_MODEL}`);
      const response = await ai.models.generateImages({
        model: GEMINI_IMAGE_MODEL,
        prompt: fullPrompt,
        config: { numberOfImages: 1, outputMimeType: 'image/png' },
      });
      
      if (response.generatedImages && response.generatedImages.length > 0) {
        const base64ImageBytes = response.generatedImages[0].image.imageBytes;
        return base64ImageBytes;
      } else {
        console.error("No images generated or unexpected response format:", response);
        throw new Error("No images were generated by the API.");
      }
    } catch (error) {
      console.error("Gemini API image generation error:", error);
      if (error instanceof Error) {
        // Check for specific error messages if needed
        if (error.message.includes("API key not valid")) {
          throw new Error("Invalid Gemini API Key. Please check your API_KEY environment variable.");
        }
        if (error.message.includes("quota")) {
            throw new Error("Gemini API quota exceeded. Please check your quota or try again later.");
        }
      }
      throw error; // Re-throw the original or a new error
    }
  },
};
